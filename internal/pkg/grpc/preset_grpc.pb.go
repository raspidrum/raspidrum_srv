// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: preset.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KitPreset_LoadPreset_FullMethodName = "/kitPreset.v1.KitPreset/LoadPreset"
)

// KitPresetClient is the client API for KitPreset service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KitPresetClient interface {
	LoadPreset(ctx context.Context, in *LoadPresetRequest, opts ...grpc.CallOption) (*LoadPresetResponse, error)
}

type kitPresetClient struct {
	cc grpc.ClientConnInterface
}

func NewKitPresetClient(cc grpc.ClientConnInterface) KitPresetClient {
	return &kitPresetClient{cc}
}

func (c *kitPresetClient) LoadPreset(ctx context.Context, in *LoadPresetRequest, opts ...grpc.CallOption) (*LoadPresetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadPresetResponse)
	err := c.cc.Invoke(ctx, KitPreset_LoadPreset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KitPresetServer is the server API for KitPreset service.
// All implementations must embed UnimplementedKitPresetServer
// for forward compatibility.
type KitPresetServer interface {
	LoadPreset(context.Context, *LoadPresetRequest) (*LoadPresetResponse, error)
	mustEmbedUnimplementedKitPresetServer()
}

// UnimplementedKitPresetServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKitPresetServer struct{}

func (UnimplementedKitPresetServer) LoadPreset(context.Context, *LoadPresetRequest) (*LoadPresetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadPreset not implemented")
}
func (UnimplementedKitPresetServer) mustEmbedUnimplementedKitPresetServer() {}
func (UnimplementedKitPresetServer) testEmbeddedByValue()                   {}

// UnsafeKitPresetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KitPresetServer will
// result in compilation errors.
type UnsafeKitPresetServer interface {
	mustEmbedUnimplementedKitPresetServer()
}

func RegisterKitPresetServer(s grpc.ServiceRegistrar, srv KitPresetServer) {
	// If the following call pancis, it indicates UnimplementedKitPresetServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KitPreset_ServiceDesc, srv)
}

func _KitPreset_LoadPreset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadPresetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitPresetServer).LoadPreset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KitPreset_LoadPreset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitPresetServer).LoadPreset(ctx, req.(*LoadPresetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KitPreset_ServiceDesc is the grpc.ServiceDesc for KitPreset service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KitPreset_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kitPreset.v1.KitPreset",
	HandlerType: (*KitPresetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadPreset",
			Handler:    _KitPreset_LoadPreset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "preset.proto",
}
